<?php
namespace App\EventSubscriber;


use App\Entity\Header;
use App\Entity\Product;
use EasyCorp\Bundle\EasyAdminBundle\Event\BeforeEntityPersistedEvent;
use EasyCorp\Bundle\EasyAdminBundle\Event\BeforeEntityUpdatedEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\KernelInterface;


/**
 * Class EasyAdminSubscriber
 *
 * @package App\EventSubscriber
 */
class EasyAdminSubscriber implements EventSubscriberInterface
{


    /**
     * @var KernelInterface
     */
    private $appKernel;


    /**
     * EasyAdminSubscriber constructor.
     * @param KernelInterface $appKernel
     */
    public function __construct(KernelInterface $appKernel)
    {
        $this->appKernel = $appKernel;
    }


    public static function getSubscribedEvents()
    {
        return [
            // evenement avant que l'entite soit creer
            // On dit avant qu'une entite produit soit creer ou persistee en base,
            // je veux que tu fasse appelle a setIllustration
            BeforeEntityPersistedEvent::class => ['setIllustration'],
            BeforeEntityUpdatedEvent::class => ['updateIllustration']
        ];
    }


    /**
     * @param $event
     * @param $entityName
     */
    public function uploadIllustration($event, $entityName)
    {
        $entity = $event->getEntityInstance();

        // dd($entity);

        // $tmpName = $entity->getIllustration();
        $tmpName = $_FILES[$entityName]['tmp_name']['illustration']['file'];

        /* dd($_FILES['Product']['name']['illustration']['file']); */
        $extension = pathinfo($_FILES[$entityName]['name']['illustration']['file'], PATHINFO_EXTENSION);
        $filename = uniqid();

        /*   dump($tmpName); dd($extension); */

        $project_dir = $this->appKernel->getProjectDir();

        move_uploaded_file($tmpName, $project_dir . '/public/uploads/'. $filename .'.'. $extension);

        /* dump($entity); */

        $entity->setIllustration($filename. '.'. $extension);
    }


    /**
     * @param BeforeEntityUpdatedEvent $event
     */
    public function updateIllustration(BeforeEntityUpdatedEvent $event)
    {
        // on verifie si l'entite est une instance de Product
        if(! ($event->getEntityInstance() instanceof Product) && ! ($event->getEntityInstance() instanceof Header))
        {
            return;
        }

        $reflection = new \ReflectionClass($event->getEntityInstance());
        $entityName = $reflection->getShortName();

        // On verifit si mon utilisateur a envoye une nouvelle image
        if($_FILES[$entityName]['tmp_name']['illustration']['file'] != '')
        {
            $this->uploadIllustration($event, $entityName);
        }
    }


    /**
     * @param BeforeEntityPersistedEvent $event
     */
    public function setIllustration(BeforeEntityPersistedEvent $event)
    {
        // on verifie si l'entite est une instance de Product
        if(! ($event->getEntityInstance() instanceof Product) && ! ($event->getEntityInstance() instanceof Header))
        {
            return;
        }

        $reflection = new \ReflectionClass($event->getEntityInstance());
        $entityName = $reflection->getShortName();

        $this->uploadIllustration($event, $entityName);
    }

}